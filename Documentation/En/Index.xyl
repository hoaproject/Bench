<?xml version="1.0" encoding="utf-8"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
<yield id="chapter">

  <p><strong>Analyzing performances</strong> of algorithms or programs is a very
  common task, to which <code>Hoa\Bench</code> answers.</p>

  <h2 id="Table_of_contents">Table des matières</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Introduction" for="main-toc">Introduction</h2>

  <p><code>Hoa\Bench</code> provides two ways to <strong>analyze</strong> an
  application: with PHP itself, or with
  <a href="http://opensolaris.org/os/community/dtrace/">DTrace</a>, thanks to
  program written in the <code>hoa://Library/Bench/Dtrace/</code> directory.</p>

  <h2 id="Place_marks" for="main-toc">Place marks</h2>

  <p>The <code>Hoa\Bench</code> library has a very intuitive use: we only need
  to place <strong>mark</strong> in the program and that's all. Each time a mark
  is executed, it collects informations we will exploit.</p>
  <p>There is two classes to know: <code>Hoa\Bench\Bench</code> which allows to
  group a set of marks, and <code>Hoa\Bench\Mark</code> which represents a
  single mark.</p>

  <h3 id="Quick_usage" for="main-toc">Quick usage</h3>

  <p>The most common usage of <code>Hoa\Bench\Bench</code> is to place some
  marks and print their statistics. Thus:</p>
  <pre><code class="language-php">$bench = new Hoa\Bench\Bench();

// Start two marks: “one” and “two”.
$bench->one->start();
$bench->two->start();

usleep(50000);

// Stop the mark “two” and start the mark “three”.
$bench->two->stop();
$bench->three->start();

usleep(25000);

// Stop all marks.
$bench->three->stop();
$bench->one->stop();

// Print statistics.
echo $bench;

/**
 * Will output:
 *     one    |||||||||||||||||||||||||||||||||||||||||||||||||||||||||    76ms, 100.0%
 *     two    ||||||||||||||||||||||||||||||||||||||                       50ms,  66.0%
 *     three  |||||||||||||||||||                                          26ms,  33.9%
 */</code></pre>
  <p>Note, to declare a mark we simply call an attribute on the class
  <code>Hoa\Bench\Bench</code>, which will return a mark (or create if it does
  not exist). Once we have a mark, we can start it by calling the
  <code>Hoa\Bench\Mark::start</code> method. To stop it, we call the
  <code>Hoa\Bench\Mark::stop</code> method. Finally, printing the
  <code>Hoa\Bench\Bench</code> object will print the statistics of marks: their
  name, a little graph, their execution time and a percentage according to all
  marks.</p>

  <h3 id="Manipulate_marks" for="main-toc">Manipulate marks</h3>

  <p>Marks can be in three different states:</p>
  <ul>
    <li>running, thanks to the <code>Hoa\Bench\Mark::start</code> method,</li>
    <li>paused, thanks to the <code>Hoa\Bench\Mark::pause</code> method, only if
    it was previously running,</li>
    <li>stopped, thanks to the <code>Hoa\Bench\Bench::stop</code> method, only
    if it was previously running.</li>
  </ul>
  <p>If we start and stop a mark, and then start it again, it will be reset.
  Notwithstanding, it exists the <code>Hoa\Bench\Mark::reset</code> method that
  will have the same behavior while forcing the reset whatever the state of the
  mark. Thus:</p>
  <pre><code class="language-php">$bench = new Hoa\Bench\Bench();
$mark  = $bench->aMark;
$mark->start(); // =  0ms
usleep(10000);
$mark->pause(); // = 10ms
usleep(10000);
$mark->start(); // = 10ms
usleep(10000);
$mark->stop();  // = 20ms
echo $bench;

/**
 * Will output:
 *     aMark  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||    21ms, 100.0%
 */

$mark->reset();
$mark->start(); // =  0ms
usleep(10000);
$mark->stop();  // = 10ms
echo $bench;

/**
 * Will output:
 *     aMark  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||    11ms, 100.0%
 */</code></pre>
  <p>Other operations are available, such as:</p>
  <ul>
    <li>get the execution time, thanks to the <code>Hoa\Bench\Mark::diff</code>
    method,</li>
    <li>compare the execution time between two marks, thanks to the
    <code>Hoa\Bench\Mark::compareTo</code> method,</li>
    <li>check whether a mark is running, thanks to the
    <code>Hoa\Bench\Mark::isRunning</code> method,</li>
    <li>check whether a mark is paused, thanks to the
    <code>Hoa\Bench\Mark::isPause</code> method.</li>
  </ul>
  <p>We said that an object <code>Hoa\Bench\Bench</code> allows to group several
  marks together. We have seen how to declare a mark, but we can also check if a
  mark exists or remove it with PHP native constructions:</p>
  <pre><code class="language-php">$bench = new Hoa\Bench\Bench();

// Create a mark.
$bench->foo;

// Is “foo” exists?
if(isset($bench->foo))
    // Then, delete it, for example.
    unset($bench->foo);</code></pre>
  <p>Obviously, we can remove all marks thanks to the
  <code>Hoa\Bench\Bench::unsetAll</code> method. In addition, the
  <code>Hoa\Bench\Bench</code> class behaves like an iterator on all marks,
  thus:</p>
  <pre><code class="language-php">foreach($bench as $id => $mark)
    echo $id, ' => ', ($mark->isRunning() ? 'running' : 'stopped'), "\n";

/**
 * Could output:
 *     one => stopped
 *     two => running
 *     three => running
 */</code></pre>
  <p>We can also count the number of marks:</p>
  <pre><code class="language-php">var_dump(count($bench));

/**
 * Will output:
 *     int(3)
 */</code></pre>
  <p>Finally, we can get statistics thanks to the
  <code>Hoa\Bench\Bench::getStatistic</code> or
  <code>Hoa\Bench\Bench::getLongest</code> methods, respectively to get
  statistics in an array corresponding to the output previously seen and to get
  the longest mark in term of execution time.</p>

  <h3 id="Filter_marks" for="main-toc">Filter marks</h3>

  <p>The <code>Hoa\Bench\Bench</code> class allows to <strong>filter</strong>
  marks during the computation of results (example with the
  <code>Hoa\Bench\Bench::getStatistic</code> or
  <code>Hoa\Bench\Bench::__toString</code> to draw the graph). A filter is a
  callable (for example a function) which receives three arguments: the
  <strong>identifier</strong> of the mark, its execution <strong>time</strong>
  in milliseconds and a percentage (according to the longest mark). A filter is
  also a predicate, it means that its result is a boolean: <code>true</code> to
  accept the mark, <code>false</code> to reject it.</p>
  <p>For example, if we have a lot of marks and we would like to filter the
  “noise”, it means marks with a low execution time (let say, lower than 5%), we
  can use the following filter:</p>
  <pre><code class="language-php">$bench->filter(function ( $id, $time, $pourcent ) {

    return $pourcent > 5;
});</code></pre>
  <p>If we name our marks with a specific classification, we can filter
  according to the name of identifiers. For example, we would like all the marks
  that contain the sub-word <code>_critical</code>:</p>
  <pre><code class="language-php">$bench->filter(function ( $id, $time, $pourcent ) {

    return 0 !== preg_match('#_critical#', $id);
});</code></pre>
  <p>Obviously, we can add many filters.</p>
  <p>Notice that the <code>Hoa\Bench\Bench::getStatistic</code> method allows to
  not consider filters thanks to its sole argument
  <code>$considerFilters</code>, which is set to <code>true</code> by default.
  To get all the result, we have to set it to <code>false</code>.</p>

  <h2 id="DTrace" for="main-toc">DTrace</h2>

  <p>The <code>Hoa\Bench</code> library also provides DTrace programs in the
  <code>hoa://Library/Bench/Dtrace/</code> directory. DTrace allows to generate
  <strong>traces</strong> in order to detect issues in realtime in a production
  environment. It is integrated into the kernel level and applicative level,
  which ensures excellent <strong>performances</strong>. DTrace uses
  <a href="https://wikis.oracle.com/display/DTrace/Documentation">the D language</a>.
  We also recommend reading the
  <a href="http://dtracebook.com/">DTraceBook</a>. Attention, DTrace is not
  available on all platforms.</p>
  <p>PHP is able to use DTrace if it has been compiled with the
  <code>--enable-dtrace</code> option (see
  <a href="https://wiki.php.net/rfc/dtrace">DTraces probes for PHP</a>).</p>
  <p>We will start by analyzing the execution of the following
  <code>Dtrace.php</code> file:</p>
  <pre><code class="language-php">&amp;lt;?php

function f ( ) { g(); h(); }
function g ( ) { h();      }
function h ( ) {           }

f();</code></pre>
  <p>This file is very simple but it will be our test to execute the first
  DTrace program, namely <code>hoa://Library/Bench/Dtrace/Execution.d</code>.
  Attention, we have to execute DTrace as a super-user; thus:</p>
  <pre><code class="language-shell">$ exed=`hoa core:resolve hoa://Library/Bench/Dtrace/Execution.d`
$ sudo $exed -c "php Dtrace.php"
Request start
     2ms ➜ f()        …/Dtrace.php:007
    37ms   ➜ g()      …/Dtrace.php:003
    26ms     ➜ h()    …/Dtrace.php:004
    28ms     ← h()
    37ms   ← g()
    44ms   ➜ h()      …/Dtrace.php:003
    25ms   ← h()
    30ms ← f()
Request end</code></pre>
  <p>Let's see what happens if we add errors and exceptions in
  <code>Dtrace.php</code>:</p>
  <pre><code class="language-php">&amp;lt;?php

function f ( ) { ++$i; g(); h();             }
function g ( ) { h();                        }
function h ( ) { throw new Exception('foo'); }

try                     { f(); }
catch ( \Exception $e ) {      }
  </code></pre>
  <p>And now, reexecute the DTrace program:</p>
  <pre><code class="language-shell">$ sudo $exed -c "php Dtrace.php"
Request start
     2ms ➜ f()                              …/Dtrace.php:007
✖          Undefined variable: i            …/Dtrace.php:003
    37ms   ➜ g()                            …/Dtrace.php:003
    26ms     ➜ h()                          …/Dtrace.php:004
●              Exception has been thrown
    28ms     ← h()
    37ms   ← g()
    44ms   ➜ h()                            …/Dtrace.php:003
    25ms   ← h()
    30ms ← f()
✔          Exception has been caught
Request end</code></pre>
  <p>The second DTrace program is <code>hoa://Library/Bench/Dtrace/Stat.d</code>
  and allows to collect some statistics on an execution such as the list of all
  called functions and methods with their respective invocations number and the
  distribution of the execution time. For example, if we try with our first
  version of <code>Dtrace.php</code>, we will have:</p>
  <pre><code class="language-shell">$ exed=`hoa core:resolve hoa://Library/Bench/Dtrace/Stat.d`
$ sudo $exed -c "php Dtrace.php"
Count calls:
  • h                                                                        2
  • g                                                                        1
  • f                                                                        1

Execution distribution (values are in nanoseconds):

  f
           value  ------------- Distribution ------------- count
             256 |                                         0
             512 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 1
            1024 |                                         0

  h
           value  ------------- Distribution ------------- count
               4 |                                         0
               8 |@@@@@@@@@@@@@@@@@@@@                     1
              16 |                                         0
              32 |                                         0
              64 |                                         0
             128 |                                         0
             256 |@@@@@@@@@@@@@@@@@@@@                     1
             512 |                                         0

  g
           value  ------------- Distribution ------------- count
             128 |                                         0
             256 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 1
             512 |                                         0

Total execution time: 108ms</code></pre>
  <p>This DTrace program is very useful to know what are the most invoked functions or
  methods in your program and to also know their average execution time. This
  program is a true and quick answer to the problem of detecting critical
  sections regarding performances!</p>

  <h2 id="Conclusion" for="main-toc">Conclusion</h2>

  <p><code>Hoa\Bench</code> allows to analyze the execution of PHP programs
  thanks to PHP itself or DTrace. These tools are useful to improve
  <strong>performances</strong> by allowing to detect bottlenecks, too numerous
  calls, slow executions etc., in order to fix them. In short, all you need to
  get <strong>quality</strong>.</p>

</yield>
</overlay>
